$ curl -O https://releases.hashicorp.com/terraform/0.11.0/terraform_0.11.0_linux_amd64.zip
 $ apt install -y unzip
 $ unzip terraform_0.11.0_linux_amd64.zip -d /usr/local/bin/
 $ terraform version

$ apt update
$ apt install -y docker.io

$ git clone https://github.com/scmlearningcentre/adobe.git adobeexamples
$ git pull

$ terraform init
$ terraform validate
$ terraform plan -out <planfilename>
$ terraform apply <planfilename>
$ terraform show
$ terraform destroy 

=============main.tf
# Specify the Docker host 
provider "docker" {
  host = "unix:///var/run/docker.sock"
}

# Download the latest Centos image
resource "docker_image" "myimg" {
  name = "nginx:stable"
}

# Start the Container
resource "docker_container" "mycontainer" {
  name  = "testng"
  image = "${docker_image.myimg.latest}"
  ports {
    internal = "80"
    external = "80"
  }
}
==========
$ terraform taint <resource-type.resourcename>
$ terraform taint docker_image.myimg
$ terraform taint docker_container.mycontainer
=================
export AWS_ACCESS_KEY_ID=(your access key id)
export AWS_SECRET_ACCESS_KEY=(your secret access key)
==============awsexample=====
# Specify the AWS details 
provider "aws" {
  region = "ap-south-1"
}

# Specify the EC2 details
resource "aws_instance" "example" {
  ami           = "ami-0b99c7725b9484f9e"
  instance_type = "t2.micro"

  depends_on = ["aws_s3_bucket.example"]
}

resource "aws_eip" "ip" {
  instance = "${aws_instance.example.id}"
}

# Create S3 bucket
resource "aws_s3_bucket" "example" {
  # NOTE: S3 bucket names must be unique across _all_ AWS accounts
  bucket = "wezva-adam-demo-s3"
}
===============variables
#Define variables
variable "image_name" {
  description = "Image for container."
  default     = "nginx:latest"
}

variable "container_name" {
  description = "Name of the container."
  default     = "testme"
}

variable "int_port" {
  description = "Internal port for container."
  default     = "80"
}

variable "ext_port" {
  description = "External port for container."
  default     = "80"
}

# Download the latest Nginx Image
resource "docker_image" "myimage" {
  name = "${var.image_name}"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "${var.container_name}"
  image = "${docker_image.myimage.latest}"
  ports {
    internal = "${var.int_port}"
    external = "${var.ext_port}"
  }
}

$ terraform plan -var 'VARIABLENAME=VALUE'
  terraform plan -var 'container_name=testme'
  terraform plan -var 'container_name=testme' -var 'image_name=nginx:stable'

$ vi test.tfvars
	container_name = "testme"
$ terraform plan -var-file="test.tfvars"
$ terraform apply -var-file="test.tfvars"
====================list variable: var.NAME[Index]
variable "image_name" {
    type    = "list"
    default = ["nginx:latest", "httpd:latest"]
}

variable "container_name" {
  description = "Name of the container."
  default     = "testme"
}

resource "docker_image" "myimage" {
  name = "${var.image_name[0]}"
}

resource "docker_container" "container_id" {
  name  = "${var.container_name}"
  image = "${docker_image.myimage.latest}"
}
================Map varibale: var.NAME[Key]
variable "image_name" {
    type = "map"
    default = {
        "test"  = "nginx:latest"
        "prod" = "httpd:latest"
    }
}

variable "container_name" {
  description = "Name of the container."
  default     = "testme"
}

# Download the latest Image
resource "docker_image" "myimage" {
  name = "${var.image_name["test"]}"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "${var.container_name}"
  image = "${docker_image.myimage.latest}"
}
==========output.tf
output "ip_address" {
  value       = "${docker_container.container_id.ip_address}"
  description = "The IP for the container."
}

============= export GITHUB_TOKEN=(your github token)
export GITHUB_TOKEN=ca97bf357787613896a326e000828362b867300b
===============
provider "github" {
  organization = "wezvatechnologies"
}

data "github_repository" "example" {
  full_name = "scmlearningcentre/maven"
}

data "github_repositories" "example" {
   query = "scmlearningcentre/is:public"
}

output "repolist" {
    value = "${data.github_repositories.example.full_names}"
}
==================
provider "aws" {
  region = "ap-south-1"
}

data "aws_availability_zones" "example" {
    state = "available"
}

output "azlist" {
    value = "${data.aws_availability_zones.example.names}"
}
==============
data "aws_instances" "test" {
  filter {
    name = "instance.group-id"
    values = ["sg-3b2e4a54"]
  }
  filter {
    name = "instance-type"
    values = ["t2.micro","t2.small"]
  }

  instance_state_names = ["running", "stopped"]
}
